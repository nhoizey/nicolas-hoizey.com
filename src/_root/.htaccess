# Inpired by
# https://github.com/mmistakes/made-mistakes-jekyll/blob/master/.htaccess
# https://github.com/fvsch/scripts-and-snippets/blob/master/apache/rewrite-well-known.conf
# Apache Server Configs v2.14.0 | MIT License
# https://github.com/h5bp/server-configs-apache

# (!) Using `.htaccess` files slows down Apache, therefore, if you have
# access to the main server configuration file (which is usually called
# `httpd.conf`), you should add this logic there.
#
# https://httpd.apache.org/docs/current/howto/htaccess.html.

# ##############################################################################
# # CROSS-ORIGIN RESOURCE SHARING (CORS)                                       #
# ##############################################################################

# ----------------------------------------------------------------------
# | Cross-origin requests                                              |
# ----------------------------------------------------------------------

# Allow cross-origin requests.
#
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
# http://enable-cors.org/
# http://www.w3.org/TR/cors/

# <IfModule mod_headers.c>
#     Header set Access-Control-Allow-Origin "*"
# </IfModule>

# ------------------------------------------------------------------------------
# | CORS-enabled images                                                        |
# ------------------------------------------------------------------------------

# Send the CORS header for images when browsers request it.
#
# https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image
# https://blog.chromium.org/2011/07/using-cross-domain-images-in-webgl-and.html

<IfModule mod_setenvif.c>
    <IfModule mod_headers.c>
        <FilesMatch "\.(bmp|cur|gif|ico|jpe?g|png|svgz?|webp)$">
            SetEnvIf Origin ":" IS_CORS
            Header set Access-Control-Allow-Origin "*" env=IS_CORS
        </FilesMatch>
    </IfModule>
</IfModule>

# ----------------------------------------------------------------------
# | Cross-origin web fonts                                             |
# ----------------------------------------------------------------------

# Allow cross-origin access to web fonts.

<IfModule mod_headers.c>
    <FilesMatch "\.(eot|otf|tt[cf]|woff2?)$">
        Header set Access-Control-Allow-Origin "*"
    </FilesMatch>
</IfModule>

# ----------------------------------------------------------------------
# | Cross-origin resource timing                                       |
# ----------------------------------------------------------------------

# Allow cross-origin access to the timing information for all resources.
#
# If a resource isn't served with a `Timing-Allow-Origin` header that
# would allow its timing information to be shared with the document,
# some of the attributes of the `PerformanceResourceTiming` object will
# be set to zero.
#
# http://www.w3.org/TR/resource-timing/
# http://www.stevesouders.com/blog/2014/08/21/resource-timing-practical-tips/

# <IfModule mod_headers.c>
#     Header set Timing-Allow-Origin: "*"
# </IfModule>

# ##############################################################################
# # ERRORS                                                                     #
# ##############################################################################

# ----------------------------------------------------------------------
# | Custom error messages/pages                                        |
# ----------------------------------------------------------------------

# Customize what Apache returns to the client in case of an error.
# https://httpd.apache.org/docs/current/mod/core.html#errordocument

ErrorDocument 404 /404.html

# ----------------------------------------------------------------------
# | Error prevention                                                   |
# ----------------------------------------------------------------------

# Disable the pattern matching based on filenames.
#
# This setting prevents Apache from returning a 404 error as the result
# of a rewrite when the directory with the same name does not exist.
#
# https://httpd.apache.org/docs/current/content-negotiation.html#multiviews

Options -MultiViews

# ######################################################################
# # MEDIA TYPES AND CHARACTER ENCODINGS                                #
# ######################################################################

# ----------------------------------------------------------------------
# | Media types                                                        |
# ----------------------------------------------------------------------

# Serve resources with the proper media types (f.k.a. MIME types).
#
# https://www.iana.org/assignments/media-types/media-types.xhtml
# https://httpd.apache.org/docs/current/mod/mod_mime.html#addtype

<IfModule mod_mime.c>
    AddType application/javascript                      mjs

  # Data interchange

    AddType application/atom+xml                        atom
    AddType application/json                            json map topojson
    AddType application/ld+json                         jsonld
    AddType application/rss+xml                         rss
    AddType application/vnd.geo+json                    geojson
    AddType application/xml                             rdf xml


  # Manifest files

    AddType application/manifest+json                   webmanifest
    AddType application/x-web-app-manifest+json         webapp
    AddType text/cache-manifest                         appcache


  # Web fonts
  # https://www.iana.org/assignments/media-types/media-types.xhtml#font

    AddType font/woff                                   woff
    AddType font/woff2                                  woff2
    AddType application/vnd.ms-fontobject               eot

    # Browsers usually ignore the font media types and simply sniff
    # the bytes to figure out the font type.
    # https://mimesniff.spec.whatwg.org/#matching-a-font-type-pattern
    #
    # However, Blink and WebKit based browsers will show a warning
    # in the console if the following font types are served with any
    # other media types.

    AddType application/x-font-ttf                      ttc ttf
    AddType font/opentype                               otf


</IfModule>

# ----------------------------------------------------------------------
# | Character encodings                                                |
# ----------------------------------------------------------------------

# Serve all resources labeled as `text/html` or `text/plain`
# with the media type `charset` parameter set to `UTF-8`.
#
# https://httpd.apache.org/docs/current/mod/core.html#adddefaultcharset

AddDefaultCharset utf-8

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Serve the following file types with the media type `charset`
# parameter set to `UTF-8`.
#
# https://httpd.apache.org/docs/current/mod/mod_mime.html#addcharset

<IfModule mod_mime.c>
    AddCharset utf-8 .atom \
                     .bbaw \
                     .css \
                     .geojson \
                     .htm \
                     .html \
                     .js \
                     .json \
                     .jsonld \
                     .manifest \
                     .mjs \
                     .rdf \
                     .rss \
                     .scss \
                     .svg \
                     .topojson \
                     .txt \
                     .vtt \
                     .webapp \
                     .webmanifest \
                     .xloc \
                     .xml
</IfModule>

# ##############################################################################
# # URL REWRITES                                                               #
# ##############################################################################

# ------------------------------------------------------------------------------
# | Rewrite engine                                                             |
# ------------------------------------------------------------------------------

# Turning on the rewrite engine and enabling the `FollowSymLinks` option is
# necessary for the following directives to work.

# If your web host doesn't allow the `FollowSymlinks` option, you may need to
# comment it out and use `Options +SymLinksIfOwnerMatch` but, be aware of the
# performance impact: http://httpd.apache.org/docs/current/misc/perf-tuning.html#symlinks

# Also, some cloud hosting services require `RewriteBase` to be set:
# http://www.rackspace.com/knowledge_center/frequently-asked-question/why-is-mod-rewrite-not-working-on-my-site

<IfModule mod_rewrite.c>
  Options +FollowSymlinks
  # Options +SymLinksIfOwnerMatch
  RewriteEngine On
  RewriteBase /
</IfModule>

# ------------------------------------------------------------------------------
# | Cleaning the domain at the beginning of URLs                               |
# ------------------------------------------------------------------------------

# The same content should never be available under two different URLs especially
# not with and without "www." at the beginning. This can cause SEO problems
# (duplicate content), therefore, you should choose one of the alternatives and
# redirect the other one.

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Remove www.
RewriteCond %{HTTP_HOST} ^www\. [NC]
RewriteRule ^(.*) https://nicolas-hoizey.com/$1 [QSA,R=301,L]

# Redirect from http to https
# RewriteCond specific to AlwaysData proxy
# https://help.alwaysdata.com/en/security/certificates/redirect-http-to-https/
RewriteCond %{HTTP:X-Forwarded-Proto} !https
RewriteRule ^(.*) https://nicolas-hoizey.com/$1 [QSA,R=301,L]

# ##############################################################################
# # SECURITY                                                                   #
# ##############################################################################

# ------------------------------------------------------------------------------
# | File access                                                                |
# ------------------------------------------------------------------------------

# Block access to directories without a default document.
# Usually you should leave this uncommented because you shouldn't allow anyone
# to surf through every directory on your server (which may includes rather
# private places like the CMS's directories).

<IfModule mod_autoindex.c>
  Options -Indexes
</IfModule>

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Block access to all hidden files and directories with the exception of
# the visible content from within the `/.well-known/` hidden directory.
#
# These types of files usually contain user preferences or the preserved
# state of an utility, and can include rather private places like, for
# example, the `.git` or `.svn` directories.
#
# The `/.well-known/` directory represents the standard (RFC 5785) path
# prefix for "well-known locations" (e.g.: `/.well-known/manifest.json`,
# `/.well-known/keybase.txt`), and therefore, access to its visible
# content should not be blocked.
#
# https://www.mnot.net/blog/2010/04/07/well-known
# https://tools.ietf.org/html/rfc5785

<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteCond %{REQUEST_URI} "!(^|/)\.well-known/([^./]+./?)+$" [NC]
    RewriteCond %{SCRIPT_FILENAME} -d [OR]
    RewriteCond %{SCRIPT_FILENAME} -f
    RewriteRule "(^|/)\." - [F]
</IfModule>

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Block access to files that can expose sensitive information.
#
# By default, block access to backup and source files that may be
# left by some text editors and can pose a security risk when anyone
# has access to them.
#
# http://feross.org/cmsploit/
#
# (!) Update the `<FilesMatch>` regular expression from below to
# include any files that might end up on your production server and
# can expose sensitive information about your website. These files may
# include: configuration files, files that contain metadata about the
# project (e.g.: project dependencies), build scripts, etc..

<FilesMatch "(^#.*#|\.(bak|conf|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$">

    # Apache < 2.3
    <IfModule !mod_authz_core.c>
        Order allow,deny
        Deny from all
        Satisfy All
    </IfModule>

    # Apache ≥ 2.3
    <IfModule mod_authz_core.c>
        Require all denied
    </IfModule>

</FilesMatch>

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Block access from libwww-perl bots

<IfModule mod_rewrite.c>
  RewriteCond %{HTTP_USER_AGENT} libwww-perl.*
  RewriteRule .* – [F,L]
</IfModule>

# ----------------------------------------------------------------------
# | Content Security Policy (CSP)                                      |
# ----------------------------------------------------------------------

# from https://github.com/h5bp/server-configs-apache/blob/master/src/security/content-security-policy.conf
#
# Mitigate the risk of cross-site scripting and other content-injection
# attacks.
#
# This can be done by setting a `Content Security Policy` which
# whitelists trusted sources of content for your website.
#
# The example header below allows ONLY scripts that are loaded from
# the current website's origin (no inline scripts, no CDN, etc).
# That almost certainly won't work as-is for your website!
#
# To make things easier, you can use an online CSP header generator
# such as: http://cspisawesome.com/.
#
# http://content-security-policy.com/
# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
# http://www.w3.org/TR/CSP11/).

<IfModule mod_headers.c>

    Header set Content-Security-Policy "upgrade-insecure-requests; base-uri 'self'; img-src 'self' data: data.nicolas-hoizey.com res.cloudinary.com i.ytimg.com image.thum.io caniuse.bitsofco.de; script-src 'self' data: 'unsafe-inline' 'unsafe-eval' data.nicolas-hoizey.com speakerdeck.com storage.googleapis.com platform.twitter.com syndication.twitter.com cdn.syndication.twimg.com cdn.jsdelivr.net assets.codepen.io static.codepen.io cpwebassets.codepen.io production-assets.codepen.io ifttt.com https://ausi.github.io/respimagelint/; object-src 'self' vimeo.com; connect-src 'self' data.nicolas-hoizey.com res.cloudinary.com *.algolia.net *.algolianet.com; report-uri https://nhocom.report-uri.com/r/d/csp/enforce"

    # `mod_headers` cannot match based on the content-type, however,
    # the `Content-Security-Policy` response header should be send
    # only for HTML documents and not for the other resources.

    <FilesMatch "\.(appcache|atom|bbaw|bmp|crx|css|cur|eot|f4[abpv]|flv|geojson|gif|htc|ico|jpe?g|js|json(ld)?|m4[av]|manifest|map|mjs|mp4|oex|og[agv]|opus|otf|pdf|png|rdf|rss|safariextz|svgz?|swf|topojson|tt[cf]|txt|vcard|vcf|vtt|webapp|web[mp]|webmanifest|woff2?|xloc|xml|xpi)$">
        Header unset Content-Security-Policy
    </FilesMatch>

</IfModule>

# ------------------------------------------------------------------------------
# | X-Frame-Options                                                            |
# ------------------------------------------------------------------------------

# from https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options
# The X-Frame-Options HTTP response header can be used to indicate whether or
# not a browser should be allowed to render a page in a <frame>, <iframe> or
# <object>. Sites can use this to avoid clickjacking attacks, by ensuring that
# their content is not embedded into other sites.

<IfModule mod_headers.c>
  Header always append X-Frame-Options SAMEORIGIN
</IfModule>

# ------------------------------------------------------------------------------
# | X-Xss-Protection                                                           |
# ------------------------------------------------------------------------------

# Used to configure the built in reflective XSS protection found in Internet
# Explorer, Chrome and Safari (Webkit). Valid settings for the header are 0,
# which disables the protection, 1 which enables the protection and
# 1; mode=block which tells the browser to block the response if it detects an
# attack rather than sanitising the script.

<IfModule mod_headers.c>
  Header always set X-Xss-Protection "1; mode=block"
</IfModule>

# ------------------------------------------------------------------------------
# | X-Content-Type-Options                                                     |
# ------------------------------------------------------------------------------

# Prevents Google Chrome and Internet Explorer from trying to mime-sniff the
# content-type of a response away from the one being declared by the server.
# Reduces exposure to drive-by downloads and the risks of user uploaded content
# that, with clever naming, could be treated as a different content-type,
# like an executable.

<IfModule mod_headers.c>
  Header always set X-Content-Type-Options "nosniff"
</IfModule>

# ------------------------------------------------------------------------------
# | HSTS                                                                       |
# ------------------------------------------------------------------------------

# https://hstspreload.appspot.com/

<IfModule mod_headers.c>
  Header set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
</IfModule>

# ------------------------------------------------------------------------------
# | Referrer Policy                                                            |
# ------------------------------------------------------------------------------

# https://scotthelme.co.uk/a-new-security-header-referrer-policy/

<IfModule mod_headers.c>
  Header set Referrer-Policy "no-referrer-when-downgrade"
</IfModule>

# ##############################################################################
# # WEB PERFORMANCE                                                            #
# ##############################################################################

# ------------------------------------------------------------------------------
# | Compression                                                                |
# ------------------------------------------------------------------------------

<IfModule mod_deflate.c>

    # Force compression for mangled `Accept-Encoding` request headers
    # https://developer.yahoo.com/blogs/ydn/pushing-beyond-gzipping-25601.html

    <IfModule mod_setenvif.c>
        <IfModule mod_headers.c>
            SetEnvIfNoCase ^(Accept-EncodXng|X-cept-Encoding|X{15}|~{15}|-{15})$ ^((gzip|deflate)\s*,?\s*)+|[X~-]{4,13}$ HAVE_Accept-Encoding
            RequestHeader append Accept-Encoding "gzip,deflate" env=HAVE_Accept-Encoding
        </IfModule>
    </IfModule>

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Compress all output labeled with one of the following media types.
    #
    # (!) For Apache versions below version 2.3.7 you don't need to
    # enable `mod_filter` and can remove the `<IfModule mod_filter.c>`
    # and `</IfModule>` lines as `AddOutputFilterByType` is still in
    # the core directives.
    #
    # https://httpd.apache.org/docs/current/mod/mod_filter.html#addoutputfilterbytype

    <IfModule mod_filter.c>
        AddOutputFilterByType DEFLATE "application/atom+xml" \
                                      "application/javascript" \
                                      "application/json" \
                                      "application/ld+json" \
                                      "application/manifest+json" \
                                      "application/rdf+xml" \
                                      "application/rss+xml" \
                                      "application/schema+json" \
                                      "application/vnd.geo+json" \
                                      "application/vnd.ms-fontobject" \
                                      "application/x-font-ttf" \
                                      "application/x-javascript" \
                                      "application/x-web-app-manifest+json" \
                                      "application/xhtml+xml" \
                                      "application/xml" \
                                      "font/eot" \
                                      "font/opentype" \
                                      "image/bmp" \
                                      "image/svg+xml" \
                                      "image/vnd.microsoft.icon" \
                                      "image/x-icon" \
                                      "text/cache-manifest" \
                                      "text/css" \
                                      "text/html" \
                                      "text/javascript" \
                                      "text/plain" \
                                      "text/vcard" \
                                      "text/vnd.rim.location.xloc" \
                                      "text/vtt" \
                                      "text/x-component" \
                                      "text/x-cross-domain-policy" \
                                      "text/xml"

    </IfModule>

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Map the following filename extensions to the specified
    # encoding type in order to make Apache serve the file types
    # with the appropriate `Content-Encoding` response header
    # (do note that this will NOT make Apache compress them!).
    #
    # If these files types would be served without an appropriate
    # `Content-Enable` response header, client applications (e.g.:
    # browsers) wouldn't know that they first need to uncompress
    # the response, and thus, wouldn't be able to understand the
    # content.
    #
    # https://httpd.apache.org/docs/current/mod/mod_mime.html#addencoding

    <IfModule mod_mime.c>
        AddEncoding gzip              svgz
    </IfModule>

</IfModule>

# ----------------------------------------------------------------------
# | ETags                                                              |
# ----------------------------------------------------------------------

# Remove `ETags` as resources are sent with far-future expires headers.
#
# https://developer.yahoo.com/performance/rules.html#etags
# https://tools.ietf.org/html/rfc7232#section-2.3

# `FileETag None` doesn't work in all cases.
<IfModule mod_headers.c>
    Header unset ETag
</IfModule>

FileETag None

# ----------------------------------------------------------------------
# | Expires headers                                                    |
# ----------------------------------------------------------------------

# Serve resources with far-future expires headers.
#
# (!) If you don't control versioning with filename-based
# cache busting, you should consider lowering the cache times
# to something like one week.
#
# https://httpd.apache.org/docs/current/mod/mod_expires.html

<IfModule mod_expires.c>

    ExpiresActive on
    ExpiresDefault                                      "access plus 1 month"

  # Don't cache the Service Worker
  # http://serverfault.com/a/414880

    <FilesMatch "sw\.js">
      ExpiresDefault                                    "access plus 0 seconds"
    </FilesMatch>


  # CSS

    ExpiresByType text/css                              "access plus 1 year"


  # Data interchange

    ExpiresByType application/atom+xml                  "access plus 1 hour"
    ExpiresByType application/rdf+xml                   "access plus 1 hour"
    ExpiresByType application/rss+xml                   "access plus 1 hour"

    ExpiresByType application/json                      "access plus 1 hour"
    ExpiresByType application/ld+json                   "access plus 1 hour"
    ExpiresByType application/schema+json               "access plus 1 hour"
    ExpiresByType application/vnd.geo+json              "access plus 1 hour"
    ExpiresByType application/xml                       "access plus 1 hour"
    ExpiresByType text/xml                              "access plus 1 hour"


  # Favicon (cannot be renamed!) and cursor images

    ExpiresByType image/vnd.microsoft.icon              "access plus 1 week"
    ExpiresByType image/x-icon                          "access plus 1 week"

  # HTML

    ExpiresByType text/html                             "access plus 1 hour"


  # JavaScript

    ExpiresByType application/javascript                "access plus 1 year"
    ExpiresByType application/x-javascript              "access plus 1 year"
    ExpiresByType text/javascript                       "access plus 1 year"


  # Manifest files

    ExpiresByType application/manifest+json             "access plus 1 hour"
    ExpiresByType application/x-web-app-manifest+json   "access plus 1 hour"
    ExpiresByType text/cache-manifest                   "access plus 1 hour"


  # Media files

    ExpiresByType audio/ogg                             "access plus 1 month"
    ExpiresByType image/bmp                             "access plus 1 month"
    ExpiresByType image/gif                             "access plus 1 month"
    ExpiresByType image/jpeg                            "access plus 1 month"
    ExpiresByType image/png                             "access plus 1 month"
    ExpiresByType image/svg+xml                         "access plus 1 month"
    ExpiresByType image/webp                            "access plus 1 month"
    ExpiresByType video/mp4                             "access plus 1 month"
    ExpiresByType video/ogg                             "access plus 1 month"
    ExpiresByType video/webm                            "access plus 1 month"


  # Web fonts

    # Embedded OpenType (EOT)
    ExpiresByType application/vnd.ms-fontobject         "access plus 1 month"
    ExpiresByType font/eot                              "access plus 1 month"

    # OpenType
    ExpiresByType font/opentype                         "access plus 1 month"

    # TrueType
    ExpiresByType application/x-font-ttf                "access plus 1 month"

    # Web Open Font Format (WOFF) 1.0
    ExpiresByType font/woff                             "access plus 1 month"

    # Web Open Font Format (WOFF) 2.0
    ExpiresByType font/woff2                            "access plus 1 month"


  # Other

    ExpiresByType text/x-cross-domain-policy            "access plus 1 week"

</IfModule>

# ------------------------------------------------------------------------------
# | Preconnect                                                                 |
# ------------------------------------------------------------------------------

# https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/
# https://nicolas-hoizey.com/notes/2020/12/22/1/

<IfModule mod_headers.c>
  Header set Link "<https://res.cloudinary.com>; rel=preconnect"
</IfModule>

# ------------------------------------------------------------------------------
# | Client Hints                                                               |
# ------------------------------------------------------------------------------

# https://cloudinary.com/blog/automatic_responsive_images_with_client_hints
# Accept-Encoding comes from default header, necessary for gzip/no-gzip requests

<IfModule mod_headers.c>
  Header set Accept-CH "DPR, Width"
  Header set Vary "Accept-Encoding, DPR, Width"
</IfModule>

# ------------------------------------------------------------------------------
# | Feature Policy                                                             |
# ------------------------------------------------------------------------------

# Add Feature Policy for cross origin Client Hints (in Chrome)
# https://source.chromium.org/chromium/chromium/src/+/master:content/public/common/content_features.cc;l=267;drc=6687e9201a1b0d2c9c81ad7e4dd113fb09547953

<IfModule mod_headers.c>
  Header set Feature-Policy "ch-dpr 'self' https://res.cloudinary.com; ch-width 'self' https://res.cloudinary.com"
</IfModule>

# ##############################################################################
# # REDIRECTS                                                                  #
# ##############################################################################

# ------------------------------------------------------------------------------
# | Cleaning the ")" at the end of URLs                                        |
# ------------------------------------------------------------------------------

RewriteRule ^(.*)\)$ https://%{HTTP_HOST}/$1 [QSA,R=301,L]

# ------------------------------------------------------------------------------
# | Redirecting from old to current pagination pages                           |
# ------------------------------------------------------------------------------

# Redirect old paginations
RewriteRule ^([0-9]{1,2})/?$ https://%{HTTP_HOST}/ [QSA,R=301,L]

# No more pagination at all
RewriteRule ^page-[0-9]+/?$ https://%{HTTP_HOST}/ [QSA,R=301,L]

# ----------------------------------------------------------------------
# Remove index.html
# ----------------------------------------------------------------------

# If it's a request to index(.html)
RewriteCond %{THE_REQUEST} \ /(.+/)?index(\.html)?(\?.*)?\  [NC]
# Remove it.
RewriteRule ^(.+/)?index(\.html)?$ https://%{HTTP_HOST}/%1 [R=301,L]

# ----------------------------------------------------------------------
# Remove trailing double slashes //
# ----------------------------------------------------------------------

RewriteCond %{REQUEST_URI} ^(.*)//(.*)$
RewriteRule . https://%{HTTP_HOST}/%1/%2 [R=301,L]

# ----------------------------------------------------------------------
# Put well known resources in the .well-known folder
# https://github.com/fvsch/scripts-and-snippets/blob/master/apache/rewrite-well-known.conf
# ----------------------------------------------------------------------

RewriteCond %{REQUEST_FILENAME} !-f

# Some very common, then less common "well-known" patterns
RewriteCond %{REQUEST_URI} =/favicon.jpg [OR]
RewriteCond %{REQUEST_URI} =/favicon.ico [OR]
RewriteCond %{REQUEST_URI} =/robots.txt [OR]
RewriteCond %{REQUEST_URI} =/crossdomain.xml [OR]
RewriteCond %{REQUEST_URI} =/apple-touch-icon.png [OR]
RewriteCond %{REQUEST_URI} =/apple-touch-icon-precomposed.png [OR]
RewriteCond %{REQUEST_URI} =/foaf.rdf [OR]
RewriteCond %{REQUEST_URI} =/w3c/p3p.xml [OR]
RewriteCond %{REQUEST_URI} ^/google[\da-f]{16}\.html$ [OR]
RewriteCond %{REQUEST_URI} ^/y_key_[\da-f]{16}\.html$ [OR]
RewriteCond %{REQUEST_URI} =/BingSiteAuth.xml$ [OR]
RewriteCond %{REQUEST_URI} =/myopenid-hosted-verification.html [OR]
RewriteCond %{REQUEST_URI} =/humans.txt

# To further limit possible issues (e.g. if you mess up the conditions above),
# we only match files at the root, not folders or files in subfolders
RewriteRule ^([a-z0-9\-\._]+)$ /.well-known/$1 [L,NC]

# ----------------------------------------------------------------------
# WebSub (ex PubSubHubbub) with https://fed.brid.gy/#setup
# ----------------------------------------------------------------------

RewriteRule ^.well-known/(host-meta|webfinger).* https://fed.brid.gy/$0  [redirect=302,last]

# ----------------------------------------------------------------------
# Renamed or moved articles and pages
# ----------------------------------------------------------------------

# https://twitter.com/nhoizey/status/1479059998252666880
RewriteRule ^AXGNM8/ne-vous-laissez-plus-deposseder-de-vos-contenus https://talks.nicolas-hoizey.com/AXGNM8/ne-vous-laissez-plus-deposseder-de-vos-contenus [QSA,L,R=301]

RewriteRule ^2015/06/un-moteur-de-recherche-sur-un-site-statique-facile-avec-algolia.html https://%{HTTP_HOST}/2015/06/la-recherche-dans-du-statique-facile-avec-algolia.html [QSA,L,R=301]
RewriteRule ^(articles/)?2017/11/medium-is-only-an-edge-server-of-your-posse-cdn-your-blog-is-the-origin(/|\.html) https://%{HTTP_HOST}/articles/2017/11/medium-is-only-an-edge-server-of-your-posse-cdn-your-own-blog-is-the-origin/ [QSA,L,R=301]

RewriteRule ^a-propos/((index|de-moi)\.html)? https://%{HTTP_HOST}/about/ [QSA,L,R=301]
RewriteRule ^a-propos\.html https://%{HTTP_HOST}/about/ [QSA,L,R=301]
RewriteRule ^a-propos/du-site\.html$ https://%{HTTP_HOST}/about/the-website.html [QSA,L,R=301]

# Migrating some articles to links
RewriteRule ^articles/2013/07/03/how-google-is-killing-organic-search/ https://%{HTTP_HOST}/links/2013/07/03/how-google-is-killing-organic-search/ [QSA,L,R=301]
RewriteRule ^(articles/)?2018/08/just.html https://%{HTTP_HOST}/links/2018/08/01/just/ [QSA,L,R=301]
RewriteRule ^(articles/)?2018/05/technical-credit.html https://%{HTTP_HOST}/links/2018/05/15/technical-credit/ [QSA,L,R=301]

# Move articles as `/articles/` subfolder
RewriteRule ^([0-9]{4}/[0-9]{2}/.*)(\.html|/)$ https://%{HTTP_HOST}/articles/$1/ [QSA,L,R=301]

# Links pages are now folders
RewriteRule ^links/([0-9]{4}/[0-9]{2}/.*)\.html$ https://%{HTTP_HOST}/links/$1/ [QSA,L,R=301]

# Tags pages are now folders
RewriteCond %{REQUEST_URI} !^/tags/index.html
RewriteRule ^tags/(.*)\.html$ https://%{HTTP_HOST}/tags/$1/ [QSA,L,R=301]

# Tools pages are now folders
RewriteRule ^tools/(.*)\.html$ https://%{HTTP_HOST}/tools/$1/ [QSA,L,R=301]

# Moving feeds
RewriteRule ^atom.xml https://%{HTTP_HOST}/feeds/articles.xml [QSA,L,R=301]

# Moving search
RewriteRule ^(search|archives).html https://%{HTTP_HOST}/archives/ [QSA,L,R=301]
RewriteRule ^search/?$ https://%{HTTP_HOST}/archives/ [QSA,L,R=301]

# This is not powered by Wordpress
RewriteRule ^wp-login.php https://%{HTTP_HOST}/about/the-website.html [QSA,L,R=302]

# These images were moved/renamed
RewriteRule ^assets/(opengraph/)?opengraph-(background(-raw)?).png https://%{HTTP_HOST}/assets/opengraph/$2.png [QSA,L,R=301]

# Notes are deeper, so that it maps to the source tree and assets copy works
RewriteRule ^(notes/[0-9]{4}/[0-9]{2}/[0-9]{2})-([0-9]+)/(.*)$ https://%{HTTP_HOST}/$1/$2/$3 [QSA,L,R=301]

# There is no page for exact date listings, redirect to month
RewriteRule ^(articles|links|notes)/([0-9]{4}/[0-9]{2})/[0-9]{2}/?$ https://%{HTTP_HOST}/$1/$2/ [QSA,L,R=301]

# Year and month archives are in the 'archives' folder
RewriteRule ^([0-9]{4}/[0-9]{2})/?$ https://%{HTTP_HOST}/archives/$1/ [QSA,L,R=301]
RewriteRule ^([0-9]{4})/?$ https://%{HTTP_HOST}/archives/$1/ [QSA,L,R=301]

# Articles and links are now one level deeper, for the day, but we don't know where… 😅
RewriteCond %{DOCUMENT_ROOT}/$1/01/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/01/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/02/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/02/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/03/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/03/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/04/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/04/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/05/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/05/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/06/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/06/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/07/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/07/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/08/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/08/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/09/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/09/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/10/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/10/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/11/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/11/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/12/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/12/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/13/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/13/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/14/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/14/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/15/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/15/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/16/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/16/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/17/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/17/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/18/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/18/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/19/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/19/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/20/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/20/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/21/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/21/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/22/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/22/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/23/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/23/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/24/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/24/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/25/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/25/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/26/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/26/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/27/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/27/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/28/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/28/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/29/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/29/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/30/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/30/$3/ [QSA,L,R=301]

RewriteCond %{DOCUMENT_ROOT}/$1/31/$3 -d
RewriteRule ^((articles|links)/[0-9]{4}/[0-9]{2})/([^/]+)(/|\.html)?$ https://%{HTTP_HOST}/$1/31/$3/ [QSA,L,R=301]

# ##############################################################################
# # HOMAGE TO Terry Pratchett: http://www.gnuterrypratchett.com/               #
# ##############################################################################

<IfModule headers_module>
  header set X-Clacks-Overhead "GNU Terry Pratchett"
</IfModule>

# ##############################################################################
# # Reporting                                                                  #
# # https://scotthelme.co.uk/network-error-logging-deep-dive/                  #
# ##############################################################################

<IfModule headers_module>
  header set Report-To '{"group":"default","max_age":31536000,"endpoints":[{"url":"https://nhocom.report-uri.com/a/d/g"}],"include_subdomains":true}'
  header set NEL '{"report_to":"default","max_age":31536000,"include_subdomains":true,"failure_fraction":0.5}'
</IfModule>
